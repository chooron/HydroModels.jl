= Methodologies of HydroModels.jl

== Symbolic Programming and Meta Information

In conventional hydrological model development, computational formulas are typically implemented using a function-based approach, where function names represent the calculations, inputs include both variables and parameters required by the formula, and outputs are the calculated results. This approach requires careful handling of variable dimension transformations within the functions. Such a construction method is less intuitive compared to writing mathematical formulas directly and increases implementation complexity. To address this challenge, our framework adopts symbolic programming, which allows developers to write code that closely resembles mathematical equations, thereby improving code readability and reducing development difficulty.

Symbolic Programming is implemented using the Symbolics.jl package, which is analogous to Python's SymPy and MATLAB's symbolic toolbox. Symbolic programming serves as the foundation for building various fluxes and parameters within the hydrological model, providing clear indicators for inputs, outputs, and parameters of different fluxes. Through symbolic programming, computational formulas can be predefined without data, allowing users to write code that directly mirrors mathematical equations, significantly improving code readability and maintainability.

During Flux construction, the framework collects metadata such as model input variables, parameters, output variable names, state variables (StateFlux), and neural network identifiers (NeuralFlux). This information is stored within each component's (bucket, model, etc.) metadata during subsequent construction phases. These metadata serve multiple purposes: they inform users about required input data and parameters, provide clarity about output results, and enable pre-indexing of variables before model computation to facilitate efficient automatic differentiation calculations.
